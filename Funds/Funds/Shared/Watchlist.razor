@using Funds.Data;
@using Funds.Models;
@inject IStocksService StocksService
@inject IAuthService AuthService
@inject NavigationManager Navigation

<h3>Watchlist</h3>

<h1>Your watchlist, @AuthService.Login!</h1>
<table id="watchlist">
    <thead>
      <tr>
        <th>Logo</th>
        <th>Symbol</th>
        <th>Name</th>
        <th>Country</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      @foreach (var s in StocksOnWatchlist)
      {
      <tr class="row">
        <td class="column"><img class="icon" src="data:image/png;base64, @s.IconUrl"></td>
        <td class="column">@s.Ticker</td>
        <td class="column">@s.Name</td>
        <td class="column">@s.Locale</td>
        <td class="column"><button class="deleteButton" @onclick="() => Unsubscribe(s.Ticker)">X</button></td>
      </tr>
      }
    </tbody>
</table>

@code {

    private IEnumerable<Stock> StocksOnWatchlist = new List<Stock>();


    private async Task Unsubscribe(string ticker)
    {
        await StocksService.Unsubscribe(AuthService.Login, ticker, AuthService.AccessToken);
        StocksOnWatchlist = StocksOnWatchlist.Where(s => s.Ticker != ticker);
    }

    protected override async Task OnParametersSetAsync()
    {
        StocksOnWatchlist = await StocksService.GetWatchlistAsync(AuthService.Login, AuthService.AccessToken);
    }
}
