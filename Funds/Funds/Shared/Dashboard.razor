@using Funds.Models;
@inject Funds.Data.IAuthService AuthService
@inject Funds.Data.IStocksService StockService
@inject NavigationManager Navigation

<div class="main">
    <h1>Welcome back, @AuthService.Login!</h1>
    <div class="autocomplete">
        <div class="search-bar">
            <input 
                size="search"
                type="text" 
                placeholder="Try smth like AAPL or Apple..." 
                @bind-value="Input" 
                @bind-value:event="oninput"
                @onkeydown="OnEnterSearch">
            <button class="look-button" @onclick="Search" >Search</button>
        </div>
        @if (results.Count() != 0)
        {
            <div class="autocomplete-items">
                @foreach (StocksPreview s in results)
                {
                    <div @onclick="() => AutoComplete(s)">
                        <strong></strong>@s.Ticker
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private IEnumerable<StocksPreview> results = new List<StocksPreview>();
    private string input = null!;
    private System.Timers.Timer timer = default!;
    private string oldInput = null!;
    public string Input 
    { 
        get => input;
        set 
        {
            if (input == value)
                return;
            results = new List<StocksPreview>();
            input = value;
            DisposeTimer();
            timer = new System.Timers.Timer(300);
            timer.Elapsed += ElapsedSearch;
            timer.Enabled = true;
            timer.Start();
        }
    }

    private void DisposeTimer()
    {
        if (timer is null)
            return;
        timer.Enabled = false;
        timer.Dispose();
        timer = null!;
    }

    private async void ElapsedSearch(object? sender, EventArgs e)
    {
        DisposeTimer();
        await LookThrough(input);
    }

    private void AutoComplete(StocksPreview s)
    {
        input = s.Ticker;
        results = Enumerable.Empty<StocksPreview>();
        Navigation.NavigateTo($"dashboard/{s.Ticker}");
    }

    private void Search()
    {
        Navigation.NavigateTo($"dashboard/search/{Input}");
        results = Enumerable.Empty<StocksPreview>();
    }

    private void OnEnterSearch(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            Search();
    }

    private async Task LookThrough(string? input)
    {
        results = new List<StocksPreview>();
        await InvokeAsync(StateHasChanged);
        if (input is null)
            return;
        results = await StockService.SearchAsync(input);
        results.Select(t => t.Name).ToList().ForEach(Console.WriteLine);
        results = results.Where(s => s.Ticker.StartsWith(input.ToUpper()) || s.Name.ToUpper().StartsWith(input.ToUpper()));
        oldInput = input;
        await InvokeAsync(StateHasChanged);
    }
}
