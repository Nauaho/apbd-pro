@inject Funds.Data.IStocksService StocksService
@inject Funds.Data.IAuthService AuthService
@inject NavigationManager Navigation
@using Funds.Models
@if(Stock is null && informationRetrieved)
{
    <h2>Sorry, we couldn't find stock called "@stock"</h2>
}

@if (Stock is not null && informationRetrieved)
{

    <div class="main">
        @if(Stock.LogoUrl is not null)
        {
            <div class="image-of-logo">
                <img class="logo" src="data:image/svg+xml;base64, @Stock.LogoUrl">
            </div>
        }
        <div class="info">
            <div class="name-and-add-button">
                <div class="name">
                    <h3>@Stock.Name (@Stock.Ticker)</h3>
                </div>
                <div class="add-button">
                    @if (!Watchlist.Any(s => s.Ticker == Stock.Ticker))
                    {
                        <button @onclick="() => Subscribe(stock)">Add</button>
                    }
                    else
                    {
                        <button @onclick="() => Unsubscribe(stock)">Remove</button>
                    }
                </div>
            </div>
            <div class="middle-info">
                <div class="smaller-info">
                    <div class="country-and-hompage">
                        <div class="country">
                            <h4>County: @Stock.Locale</h4>
                        </div>
                        <div class="homepage">
                            <h4><a href="@Stock.HomepageUrl">Read more...</a></h4>
                        </div>  
                    </div>
                </div>
                <div class="description">
                    @Stock.Description
                </div>
            </div>
        </div>
        <div id="stock-chart"></div>
    </div>
}

@code {
    [Parameter]
    public string stock { get; set; } = null!;
    public IEnumerable<Stock> Watchlist { get; set; } = new List<Stock>();
    private bool informationRetrieved = false;
    private Stock Stock = null!;

    protected override async Task OnParametersSetAsync()
    {
        var result =  await StocksService.GetStockInfoAsync(stock);
        if(result is null)
        {
            Navigation.NavigateTo("dashboard");
            return;
        }
        Watchlist = await StocksService.GetWatchlistAsync();
        Stock = result;
        informationRetrieved = true;
        StateHasChanged();
    }

    private async Task Unsubscribe(string ticker)
    {
        await StocksService.Unsubscribe(ticker);
        Watchlist = Watchlist.Where(s => s.Ticker != ticker);
        Console.WriteLine();
        StateHasChanged();
    }

    private async Task Subscribe(string ticker)
    {
        await StocksService.Subscribe(ticker);
        Watchlist = Watchlist.Append(Stock);
        Console.WriteLine(Watchlist.Any(s => s.Ticker == Stock.Ticker));
        StateHasChanged();
    }
}
