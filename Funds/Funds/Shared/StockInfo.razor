@inject Funds.Data.IStocksService StocksService
@inject Funds.Data.IAuthService AuthService
@inject NavigationManager Navigation
@inject Funds.Data.IStockChartService StockChartService
@using Funds.Models

<div class="main">
    @if (Stock is null && !informationRetrieved)
    {
        <div class="loader"></div>
    }

    @if(Stock is null && informationRetrieved)
    {
        <h2>Sorry, we couldn't find stock called "@stock"</h2>
    }

    @if (Stock is not null && informationRetrieved)
    {
    
        @if(Stock.LogoUrl is not null)
        {
            <div class="image-of-logo">
                <img class="logo" src="data:image/svg+xml;base64, @Stock.LogoUrl">
            </div>
        }
        <div class="info">
            <div class="name-and-add-button">
                <div class="name">
                    <h3>@Stock.Name (@Stock.Ticker)</h3>
                </div>
                <div class="add-button">
                    @if (!Watchlist.Any(s => s.Ticker == Stock.Ticker))
                    {
                        <button @onclick="() => Subscribe(Stock)">Add</button>
                    }
                    else
                    {
                        <button @onclick="() => Unsubscribe(Stock)">Remove</button>
                    }
                </div>
            </div>
            <div class="middle-info">
                <div class="smaller-info">
                    <div class="country-and-hompage">
                        <div class="country">
                            <h4>County: @Stock.Locale</h4>
                        </div>
                        <div class="homepage">
                            <h4><a href="@Stock.HomepageUrl">Read more...</a></h4>
                        </div>  
                    </div>
                </div>
                <div class="description">
                    @Stock.Description
                </div>
            </div>
        </div>
        <div id="chart">
            @if (chartIsDrawn)
            {
                <div id="stock-panel">
                    <button @onclick='() => DrawChart( "day", "1", "1D")' class="scaleButton-chosen" id="1D">1D</button>
                    <button @onclick='() => DrawChart( "day", "3", "3D")' class="scaleButton" id="3D">3D</button>
                    <button @onclick='() => DrawChart( "week", "1", "1W")' class="scaleButton" id="1W">1W</button>
                    <button @onclick='() => DrawChart( "month", "1", "1M")' class="scaleButton" id="1M">1M</button>
                    <button @onclick='() => DrawChart( "month", "3", "3M")' class="scaleButton" id="3M">3M</button>
                 </div>
             }
        <div id="@chart"></div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string stock { get; set; } = null!;
    public IEnumerable<Stock> Watchlist { get; set; } = new List<Stock>();
    private bool informationRetrieved = false;
    private bool firstDraw = true;
    private bool chartIsDrawn = false;
    private Stock? Stock = null!;
    private string chart = "stock-chart";
    private string activeButtonStyle = "scaleButton-chosen";
    private string nonActiveButtonStyle = "scaleButton";
    private string activeButtonId = "1D";

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine(stock);
        Stock =  await StocksService.GetStockInfoAsync(stock);
        Watchlist = await StocksService.GetWatchlistAsync();
        informationRetrieved = true ;
        firstDraw = true;
        chartIsDrawn = false;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Stock is null)
            return;
        if (firstDraw)
        {
            chartIsDrawn = await StockChartService.DrawMeChartAsync(Stock.Ticker, "day", "1", chart);
            firstDraw = false;
            StateHasChanged();
        }
    }

    private async Task Unsubscribe(Stock stock)
    {
        await StocksService.Unsubscribe(stock.Ticker);
        Watchlist = Watchlist.Where(s => s.Ticker != stock.Ticker);
        Console.WriteLine();
        StateHasChanged();
    }

    private async Task DrawChart( string timespan, string multiplyer, string idButton)
    {
        if (Stock is null)
            return;
        var chartTask = StockChartService.DrawMeChartAsync(Stock.Ticker, timespan, multiplyer, chart);
        await Task.WhenAll(
            chartTask,
            Task.Run(async () =>
            {
                await StockChartService.ApplyStyleOnElementAsync(idButton, activeButtonStyle);
                await StockChartService.ApplyStyleOnElementAsync(activeButtonId, nonActiveButtonStyle);
                activeButtonId = idButton;
            })
        );
        chartIsDrawn = chartTask.Result;
    }

    private async Task Subscribe(Stock stock)
    {
        await StocksService.Subscribe(stock.Ticker);
        Watchlist = Watchlist.Append(stock);
        Console.WriteLine(Watchlist.Any(s => s.Ticker == stock.Ticker));
        StateHasChanged();
    }
}
