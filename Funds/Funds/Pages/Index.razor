@page "/"
@page "/{action}"
@using Funds.Models;
@using WebApi.Models.DTOs;
@inject Funds.Data.IAuthService AuthService
@inject Funds.Data.IStocksService StocksService
@inject Funds.Data.ICookieService CookieService
@inject NavigationManager Navigation


@if(string.IsNullOrEmpty(action))
{
    <Basic></Basic>
}

@if (action == "login")
{
    <Login></Login>
}
@if (action == "register")
{
    <Register></Register>
}

@if (action == "dashboard")
{
    <Dashboard></Dashboard>
}

@if (action == "watchlist" && AuthService.IsLoggedIn)
{
   <Watchlist></Watchlist>
}

@code {
    [Parameter]
    public string action { get; set; } = null!;
    bool dontShowErrorMessage = true;
    string errorMessage = "Something went wrong";    

    private void ShowError(string newErrorMessage)
    {
        errorMessage = newErrorMessage;
        dontShowErrorMessage = false;
    } 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
            return;

        var t = await CookieService.ReadCookieAsync("refreshToken");
        var l = await CookieService.ReadCookieAsync("login");

        if (t == null || l == null)
        {
            Navigation.NavigateTo("");
            return;
        }

        var tokens = await AuthService.RefreshTheToken(l,t);
        if(tokens is null)
        {
            Navigation.NavigateTo("login");
            return;
        }
        await CookieService.CreateCookieAsync("login", l, DateTime.Now.AddDays(5));
        await CookieService.CreateCookieAsync("refreshToken", tokens.RefreshToken, DateTime.Now.AddDays(5));
        if (string.IsNullOrEmpty(action) || action == "login" || action == "register")
            Navigation.NavigateTo("dashboard");
    }
}
